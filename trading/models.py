"""Trading strategy and execution models."""

from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from core.models import TimeStampedModel
from angel_api.models import NSESymbol
from portfolio.models import Portfolio


class TradingStrategy(TimeStampedModel):
    """Model to define trading strategies."""
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField()
    
    # Strategy parameters
    strategy_type = models.CharField(max_length=50, choices=[
        ('MOMENTUM', 'Momentum'),
        ('MEAN_REVERSION', 'Mean Reversion'),
        ('BREAKOUT', 'Breakout'),
        ('NEWS_BASED', 'News Based'),
        ('TECHNICAL', 'Technical Analysis'),
        ('CUSTOM', 'Custom'),
    ])
    
    # Configuration
    config_parameters = models.JSONField(default=dict, help_text="Strategy configuration parameters")
    
    # Status
    is_active = models.BooleanField(default=True)
    is_backtest_only = models.BooleanField(default=False)
    
    # Performance tracking
    total_trades = models.IntegerField(default=0)
    winning_trades = models.IntegerField(default=0)
    total_pnl = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    class Meta:
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} ({self.strategy_type})"
    
    @property
    def win_rate(self):
        """Calculate win rate percentage."""
        if self.total_trades == 0:
            return 0
        return (self.winning_trades / self.total_trades) * 100


class TradingBot(TimeStampedModel):
    """Model to represent trading bot instances."""
    name = models.CharField(max_length=100)
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE, related_name='trading_bots')
    strategy = models.ForeignKey(TradingStrategy, on_delete=models.CASCADE, related_name='bots')
    
    # Bot configuration
    is_active = models.BooleanField(default=False)
    is_paper_trading = models.BooleanField(default=True)
    max_positions = models.IntegerField(default=5)
    position_size = models.DecimalField(max_digits=5, decimal_places=2, default=10.0, 
                                       help_text="Position size as percentage of portfolio")
    
    # Risk management
    stop_loss_percent = models.DecimalField(max_digits=5, decimal_places=2, default=2.0)
    take_profit_percent = models.DecimalField(max_digits=5, decimal_places=2, default=5.0)
    daily_loss_limit = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    
    # Execution settings
    check_interval_minutes = models.IntegerField(default=5)
    trading_hours_only = models.BooleanField(default=True)
    
    # Status tracking
    last_run_at = models.DateTimeField(null=True, blank=True)
    total_runs = models.IntegerField(default=0)
    error_count = models.IntegerField(default=0)
    last_error = models.TextField(blank=True)
    
    class Meta:
        ordering = ['-created_at']
        unique_together = ['portfolio', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.strategy.name} ({'Active' if self.is_active else 'Inactive'})"


class TradingSignal(TimeStampedModel):
    """Model to store trading signals generated by strategies."""
    strategy = models.ForeignKey(TradingStrategy, on_delete=models.CASCADE, related_name='signals')
    symbol = models.ForeignKey(NSESymbol, on_delete=models.CASCADE, related_name='signals')
    
    # Signal details
    signal_type = models.CharField(max_length=10, choices=[
        ('BUY', 'Buy'),
        ('SELL', 'Sell'),
        ('HOLD', 'Hold'),
    ])
    confidence = models.DecimalField(max_digits=5, decimal_places=2, help_text="Signal confidence 0-100")
    entry_price = models.DecimalField(max_digits=12, decimal_places=2)
    target_price = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    stop_loss_price = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # Signal metadata
    signal_strength = models.CharField(max_length=20, choices=[
        ('WEAK', 'Weak'),
        ('MODERATE', 'Moderate'),
        ('STRONG', 'Strong'),
        ('VERY_STRONG', 'Very Strong'),
    ], default='MODERATE')
    
    # Analysis data
    analysis_data = models.JSONField(default=dict, help_text="Technical analysis data")
    news_sentiment = models.CharField(max_length=20, choices=[
        ('POSITIVE', 'Positive'),
        ('NEGATIVE', 'Negative'),
        ('NEUTRAL', 'Neutral'),
    ], null=True, blank=True)
    
    # Status
    is_active = models.BooleanField(default=True)
    is_executed = models.BooleanField(default=False)
    executed_at = models.DateTimeField(null=True, blank=True)
    execution_price = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # Expiry
    expires_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['strategy', 'is_active', '-created_at']),
            models.Index(fields=['symbol', 'signal_type', '-created_at']),
            models.Index(fields=['is_executed', '-created_at']),
        ]
    
    def __str__(self):
        return f"{self.signal_type} {self.symbol.symbol} @ â‚¹{self.entry_price} - {self.signal_strength}"
    
    def is_expired(self):
        """Check if signal has expired."""
        if self.expires_at:
            return timezone.now() > self.expires_at
        return False


class TradingExecution(TimeStampedModel):
    """Model to track trading execution details."""
    bot = models.ForeignKey(TradingBot, on_delete=models.CASCADE, related_name='executions')
    signal = models.ForeignKey(TradingSignal, on_delete=models.CASCADE, related_name='executions')
    
    # Execution details
    execution_type = models.CharField(max_length=20, choices=[
        ('SIGNAL_ENTRY', 'Signal Entry'),
        ('STOP_LOSS', 'Stop Loss'),
        ('TAKE_PROFIT', 'Take Profit'),
        ('MANUAL', 'Manual'),
        ('TIMEOUT', 'Timeout'),
    ])
    
    # Order details
    order_id = models.CharField(max_length=100, blank=True)
    quantity = models.IntegerField()
    requested_price = models.DecimalField(max_digits=12, decimal_places=2)
    executed_price = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # Status
    status = models.CharField(max_length=20, choices=[
        ('PENDING', 'Pending'),
        ('EXECUTED', 'Executed'),
        ('FAILED', 'Failed'),
        ('CANCELLED', 'Cancelled'),
    ], default='PENDING')
    
    # Error handling
    error_message = models.TextField(blank=True)
    retry_count = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['bot', 'status', '-created_at']),
            models.Index(fields=['signal', '-created_at']),
        ]
    
    def __str__(self):
        return f"{self.execution_type} - {self.signal.symbol.symbol} - {self.status}"


class MarketAnalysis(TimeStampedModel):
    """Model to store market analysis results."""
    symbol = models.ForeignKey(NSESymbol, on_delete=models.CASCADE, related_name='market_analysis')
    analysis_date = models.DateField(default=timezone.now)
    
    # Technical indicators
    sma_20 = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    sma_50 = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    rsi = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    macd = models.DecimalField(max_digits=8, decimal_places=4, null=True, blank=True)
    bollinger_upper = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    bollinger_lower = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # Price data
    current_price = models.DecimalField(max_digits=12, decimal_places=2)
    price_change_1d = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True)
    price_change_7d = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True)
    volume_avg_20d = models.BigIntegerField(null=True, blank=True)
    
    # Sentiment analysis
    news_sentiment_score = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    social_sentiment_score = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    analyst_rating = models.CharField(max_length=20, choices=[
        ('STRONG_BUY', 'Strong Buy'),
        ('BUY', 'Buy'),
        ('HOLD', 'Hold'),
        ('SELL', 'Sell'),
        ('STRONG_SELL', 'Strong Sell'),
    ], null=True, blank=True)
    
    # Overall analysis
    analysis_result = models.JSONField(default=dict)
    recommendation = models.CharField(max_length=20, choices=[
        ('STRONG_BUY', 'Strong Buy'),
        ('BUY', 'Buy'),
        ('HOLD', 'Hold'),
        ('SELL', 'Sell'),
        ('STRONG_SELL', 'Strong Sell'),
    ], null=True, blank=True)
    confidence_score = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    
    class Meta:
        unique_together = ['symbol', 'analysis_date']
        ordering = ['-analysis_date', 'symbol__symbol']
        indexes = [
            models.Index(fields=['symbol', '-analysis_date']),
            models.Index(fields=['recommendation', '-analysis_date']),
        ]
    
    def __str__(self):
        return f"{self.symbol.symbol} analysis - {self.analysis_date} - {self.recommendation or 'N/A'}"


class NewsAnalysis(TimeStampedModel):
    """Model to store news analysis for symbols."""
    symbol = models.ForeignKey(NSESymbol, on_delete=models.CASCADE, related_name='news_analysis')
    
    # News details
    headline = models.TextField()
    source = models.CharField(max_length=100)
    url = models.URLField(blank=True)
    published_at = models.DateTimeField()
    
    # Analysis results
    sentiment = models.CharField(max_length=20, choices=[
        ('POSITIVE', 'Positive'),
        ('NEGATIVE', 'Negative'),
        ('NEUTRAL', 'Neutral'),
    ])
    sentiment_score = models.DecimalField(max_digits=5, decimal_places=2, 
                                        help_text="Sentiment score -1 to 1")
    
    # Impact assessment
    market_impact = models.CharField(max_length=20, choices=[
        ('HIGH', 'High'),
        ('MEDIUM', 'Medium'),
        ('LOW', 'Low'),
    ], default='LOW')
    
    # Keywords and categories
    keywords = models.JSONField(default=list)
    categories = models.JSONField(default=list)
    
    # Processing status
    is_processed = models.BooleanField(default=False)
    processing_notes = models.TextField(blank=True)
    
    class Meta:
        ordering = ['-published_at']
        indexes = [
            models.Index(fields=['symbol', 'sentiment', '-published_at']),
            models.Index(fields=['market_impact', '-published_at']),
        ]
    
    def __str__(self):
        return f"{self.symbol.symbol} - {self.sentiment} - {self.headline[:50]}..."
